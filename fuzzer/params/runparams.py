import os
from params.fuzzparams import USE_MMU, TAINT_NONTAKEN_BRANCH_IMM
from params.runparams_default import *
from params.env_helperfuncs import get_env_int, get_env_bool
# Ensure Cascade environment is sourced
if "MILESAN_ENV_SOURCED" not in os.environ:
    raise Exception("The Cascade environment must be sourced prior to running the Python recipes.")

# Paths
PATH_TO_TMP_ENV_VAR = "MILESAN_DATADIR"
PATH_TO_TMP = os.path.join(os.environ[PATH_TO_TMP_ENV_VAR])
os.makedirs(PATH_TO_TMP, exist_ok=True)
PATH_TO_MNT = os.path.join(os.environ['LOCAL_MNT'])
PATH_FROM_MODELSIM_TO_MNT =  os.path.join(os.environ['PATH_FROM_MODELSIM_TO_MNT'])
PATH_TO_MNT_ENV_VAR = "LOCAL_MNT"
MODELSIM_REQ_DIR = os.path.join(PATH_TO_MNT, "modelsim_req")
os.makedirs(MODELSIM_REQ_DIR, exist_ok=True)
PATH_TO_COV = os.path.join(os.environ['COVDUMP_DIR'])
PATH_TO_FIGURES = os.environ['MILESAN_PATH_TO_FIGURES']

# Actual values set from environment variables or defaults
DO_ASSERT = get_env_bool('DO_ASSERT', str(int(DO_ASSERT_DEFAULT)))
DO_EXPENSIVE_ASSERT = get_env_bool('DO_EXPENSIVE_ASSERT', str(int(DO_EXPENSIVE_ASSERT_DEFAULT)))
NO_REMOVE_TMPFILES = get_env_bool('NO_REMOVE_TMPFILES', str(int(NO_REMOVE_TMPFILES_DEFAULT)))
NO_REMOVE_TMPDIRS = get_env_bool('NO_REMOVE_TMPDIRS', str(int(NO_REMOVE_TMPDIRS_DEFAULT)))
RUN_TIMEOUT_SECONDS = get_env_int('RUN_TIMEOUT_SECONDS', RUN_TIMEOUT_SECONDS_DEFAULT)
PRINT_FSM_TRANSITIONS = get_env_bool('PRINT_FSM_TRANSITIONS', str(int(PRINT_FSM_TRANSITIONS_DEFAULT)))
CHECK_REGS_T0_PRECISE = get_env_bool('CHECK_REGS_T0_PRECISE', str(int(CHECK_REGS_T0_PRECISE_DEFAULT)))
CHECK_MEM_T0_PRECISE = get_env_bool('CHECK_MEM_T0_PRECISE', str(int(CHECK_MEM_T0_PRECISE_DEFAULT)))
CHECK_MEM = get_env_bool('CHECK_MEM', str(int(CHECK_MEM_DEFAULT)))
PRINT_CHECK_REGS_T0 = get_env_bool('PRINT_CHECK_REGS_T0', str(int(PRINT_CHECK_REGS_T0_DEFAULT)))
PRINT_CHECK_REGS_T0_MISMATCH_OK = get_env_bool('PRINT_CHECK_REGS_T0_MISMATCH_OK', str(int(PRINT_CHECK_REGS_T0_MISMATCH_OK_DEFAULT)))
PRINT_CHECK_REGS = get_env_bool('PRINT_CHECK_REGS', str(int(PRINT_CHECK_REGS_DEFAULT)))
PRINT_WRITEBACK_T0 = get_env_bool('PRINT_WRITEBACK_T0', str(int(PRINT_WRITEBACK_T0_DEFAULT)))
PRINT_WRITEBACK = get_env_bool('PRINT_WRITEBACK', str(int(PRINT_WRITEBACK_DEFAULT)))
DUMP_WRITEBACK = get_env_bool('DUMP_WRITEBACK', str(int(DUMP_WRITEBACK_DEFAULT)))
DUMP_WRITEBACK_T0 = get_env_bool('DUMP_WRITEBACK_T0', str(int(DUMP_WRITEBACK_T0_DEFAULT)))
PRINT_INSTRUCTION_EXECUTION_IN_SITU = get_env_bool('PRINT_INSTRUCTION_EXECUTION_IN_SITU', str(int(PRINT_INSTRUCTION_EXECUTION_IN_SITU_DEFAULT)))
PRINT_INSTRUCTION_EXECUTION_FINAL = get_env_bool('PRINT_INSTRUCTION_EXECUTION_FINAL', str(int(PRINT_INSTRUCTION_EXECUTION_FINAL_DEFAULT)))
PRINT_INSTRUCTION_EXECUTION_REDUCE = get_env_bool('PRINT_INSTRUCTION_EXECUTION_REDUCE', str(int(PRINT_INSTRUCTION_EXECUTION_REDUCE_DEFAULT)))
PRINT_INSTRUCTION_EXECUTION_REGDUMP_REQS = get_env_bool('PRINT_INSTRUCTION_EXECUTION_REGDUMP_REQS', str(int(PRINT_INSTRUCTION_EXECUTION_REGDUMP_REQS_DEFAULT)))
PRINT_TRANSIENT_INSTRUCTIONS = get_env_bool('PRINT_TRANSIENT_INSTRUCTIONS', str(int(PRINT_TRANSIENT_INSTRUCTIONS_DEFAULT)))
PRINT_RESTORED_TRANSIENT_STATE = get_env_bool('PRINT_RESTORED_TRANSIENT_STATE', str(int(PRINT_RESTORED_TRANSIENT_STATE_DEFAULT)))
PRINT_COLOR_TAINT = get_env_bool('PRINT_COLOR_TAINT', str(int(PRINT_COLOR_TAINT_DEFAULT)))
PRINT_REG_TRACEBACK = get_env_bool('PRINT_REG_TRACEBACK', str(int(PRINT_REG_TRACEBACK_DEFAULT)))
PRINT_FILTERED_REG_TRACEBACK = get_env_bool('PRINT_FILTERED_REG_TRACEBACK', str(int(PRINT_FILTERED_REG_TRACEBACK_DEFAULT)))
PRINT_ENVIRONMENT = get_env_bool('PRINT_ENVIRONMENT', str(int(PRINT_ENVIRONMENT_DEFAULT)))
INSERT_REGDUMPS = get_env_bool('INSERT_REGDUMPS', str(int(INSERT_REGDUMPS_DEFAULT)))
INSERT_FENCE = get_env_bool('INSERT_FENCE', str(int(INSERT_FENCE_DEFAULT)))
CHECK_PC_SPIKE_AGAIN = get_env_bool('CHECK_PC_SPIKE_AGAIN', str(int(CHECK_PC_SPIKE_AGAIN_DEFAULT)))
PRINT_REGISTER_VALIDATION = get_env_bool('PRINT_REGISTER_VALIDATION', str(int(PRINT_REGISTER_VALIDATION_DEFAULT)))
PRINT_MEMORY_VALIDATION = get_env_bool('PRINT_MEMORY_VALIDATION', str(int(PRINT_MEMORY_VALIDATION_DEFAULT)))
PRINT_AND_COMPARE = get_env_bool('PRINT_AND_COMPARE', str(int(PRINT_AND_COMPARE_DEFAULT)))
PRINT_SKIPPED_CHECKS = get_env_bool('PRINT_SKIPPED_CHECKS', str(int(PRINT_SKIPPED_CHECKS_DEFAULT)))
PRINT_MEM_LOADS = get_env_bool('PRINT_MEM_LOADS', str(int(PRINT_MEM_LOADS_DEFAULT)))
PRINT_MEM_LOADS_T0 = get_env_bool('PRINT_MEM_LOADS_T0', str(int(PRINT_MEM_LOADS_T0_DEFAULT)))
PRINT_MEM_STORES = get_env_bool('PRINT_MEM_STORES', str(int(PRINT_MEM_STORES_DEFAULT)))
PRINT_MEM_STORES_T0 = get_env_bool('PRINT_MEM_STORES_T0', str(int(PRINT_MEM_STORES_T0_DEFAULT)))
GET_DATA = get_env_bool('GET_DATA', str(int(GET_DATA_DEFAULT)))
DEBUG_PRINT = get_env_bool('DEBUG_PRINT', str(int(DEBUG_PRINT_DEFAULT)))
ASSERT_ADDR = get_env_bool('ASSERT_ADDR', str(int(ASSERT_ADDR_DEFAULT)))
ASSERT_WRITEBACK_TRACE = get_env_bool('ASSERT_WRITEBACK_TRACE', str(int(ASSERT_WRITEBACK_TRACE_DEFAULT)))
PRINT_PRIV_STATS = get_env_bool('PRINT_PRIV_STATS', str(int(PRINT_PRIV_STATS_DEFAULT)))
DO_DOUBLECHECK_SIM = get_env_bool('DO_DOUBLECHECK_SIM', str(int(DO_DOUBLECHECK_SIM_DEFAULT)))
TRACE_EN = get_env_bool('TRACE_EN', str(int(TRACE_EN_DEFAULT)))
COV_EN = get_env_bool('COV_EN', str(int(COV_EN_DEFAULT)))
TRACE_FST = get_env_bool('TRACE_FST', str(int(TRACE_FST_DEFAULT)))
COLLECT_PERF_STATS = get_env_bool('COLLECT_PERF_STATS', str(int(COLLECT_PERF_STATS_DEFAULT)))
COLLECT_EXCEPTION_STATS = get_env_bool('COLLECT_EXCEPTION_STATS', str(int(COLLECT_EXCEPTION_STATS_DEFAULT)))
COLLECT_TAINT_STATS = get_env_bool('COLLECT_TAINT_STATS', str(int(COLLECT_TAINT_STATS_DEFAULT)))
SKIP_RTL = get_env_bool("SKIP_RTL",str(int(SKIP_RTL_DEFAULT)))
USE_MODELSIM = get_env_bool('USE_MODELSIM', str(int(USE_MODELSIM_DEFAULT)))
DEBUG_RVC = get_env_bool('DEBUG_RVC', str(int(DEBUG_RVC_DEFAULT)))
IGNORE_SPIKE_OFFSET_IN_REG_CHECK = get_env_bool('IGNORE_SPIKE_OFFSET_IN_REG_CHECK', str(int(IGNORE_SPIKE_OFFSET_IN_REG_CHECK_DEFAULT)))
PICKLE_FUZZERSTATE = get_env_bool('PICKLE_FUZZERSTATE', str(int(PICKLE_FUZZERSTATE_DEFAULT)))
MODELSIM_TIMEOUT = 60*60*24*7

if INSERT_REGDUMPS and CHECK_PC_SPIKE_AGAIN:
    print(f"WARNING: Disabling CHECK_PC_SPIKE_AGAIN because INSERT_REGDUMPS is enabled. Cannot have both at the same time for now.")
    CHECK_PC_SPIKE_AGAIN = False
if COLLECT_TAINT_STATS or COLLECT_PERF_STATS or COLLECT_EXCEPTION_STATS:
    print(f"WARNING: Enabling NO_REMOVE_TMPDIRS for *_STATS collection.")
    NO_REMOVE_TMPDIRS = True
if SKIP_RTL:
    print("WARNING: SKIP_RTL is enabled.")

# Ensure specific assertions
assert not (USE_MMU and INSERT_REGDUMPS), "Regdumps are not supported when MMU is enabled."
# assert not (INSERT_SPECTRE_GADGETS and INSERT_REGDUMPS), "Regdumps are not supported when spectre gadgets enabled."
assert not (TAINT_NONTAKEN_BRANCH_IMM and INSERT_REGDUMPS), "Enabling TAINT_NONTAKEN_BRANCH_IMM might render INSERT_REGDUMPS useless as pc might get tainted if non-taken branch is predicted taken."
assert not (INSERT_REGDUMPS and CHECK_PC_SPIKE_AGAIN), f"Cannot check pc trace from spike when INSERT_REGDUMPS is enabled."
assert not (INSERT_FENCE and not INSERT_REGDUMPS), f"INSERT_REGDUMPS must be enabled."
# assert not (SKIP_RTL and not COLLECT_PERF_STATS),f"SKIP_RTL enabled while COLLECT_PER_STATS disabled... "
# Timestamp
TIMESTAMP_START = None
